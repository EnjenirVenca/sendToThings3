# This is a basic workflow to help you get started with Actions

name: Build setup and executable on Tag

# Controls when the action will run. 
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [windows-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        
      - name: Get tag version 
        uses: little-core-labs/get-git-tag@v3.0.1
        id: tagName
        with: 
          tagRegex: "^.(.*)$"
          
      - name: Rename Version (Setup)
        run: powershell -Command "(gc setup.iss) -replace 'debug', '${{env.GIT_TAG_NAME}}' | Out-File -encoding ASCII setup.iss"

      - name: Rename Version (VS)
        run: powershell -Command "(gc sendToThings3/Properties/AssemblyInfo.cs) -replace '1.0.0.0', '${{env.GIT_TAG_NAME}}' | Out-File -encoding ASCII sendToThings3/Properties/AssemblyInfo.cs"

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1
        
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v1.0.5
        
      - name: Restore NuGet packages
        run: nuget restore sendToThings3.sln
       
      - name: Build the Solution
        run: msbuild sendToThings3.sln /t:sendToThings3 /p:Configuration=Release
         
      - name: Setup Inno Setup
        run: choco install innosetup
          
      - name: Setup Compiler
        run: |
          "%programfiles(x86)%\Inno Setup 6\iscc.exe" "setup.iss"
        shell: cmd
      
      - name: Zip Setup
        run: tar.exe -a -c -f sendToThings_setup.zip sendToThings_setup.exe
      
      - name: Zip Executables
        run: tar.exe -a -c -f sendToThings_executable.zip -C sendToThings3/bin/Release sendToThings3.exe Newtonsoft.Json.dll
        
      - name: Upload build artifacts Installer
        uses: actions/upload-artifact@v2
        with:
          name: sendToThings_Win.zip
          path: sendToThings_setup.zip
          
      - name: Upload build artifacts Exe
        uses: actions/upload-artifact@v2
        with:
          name: sendToThings_executable.zip
          path: sendToThings_executable.zip
        
  release:
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download Installer
        uses: actions/download-artifact@v2
        with:
          name: sendToThings_Win.zip
          
      - name: Download Executable
        uses: actions/download-artifact@v2
        with:
          name: sendToThings_executable.zip

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./sendToThings_setup.zip
          asset_name: sendToThings_setup.zip
          asset_content_type: application/zip
          
      - name: Upload Release Executable
        id: upload-release-executable 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./sendToThings_executable.zip
          asset_name: sendToThings_executable.zip
          asset_content_type: application/zip
